@file:OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)
package com.example.smartexpense.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.smartexpense.data.model.Expense
import com.example.smartexpense.data.repository.ExpenseRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class AddExpenseViewModel(
    private val repo: ExpenseRepository
) : ViewModel() {

    private val _saved = MutableStateFlow(false)
    val saved: StateFlow<Boolean> = _saved.asStateFlow()

    /**
     * @param amountStr    the user-entered amount as String
     * @param description  the user-entered description
     * @param category     the selected category
     * @param timestamp    epoch-millis chosen by the user (or default now)
     */
    fun save(
        amountStr: String,
        description: String,
        category: String,
        timestamp: Long
    ) {
        val amount = amountStr.toDoubleOrNull() ?: return
        viewModelScope.launch(Dispatchers.IO) {
            // id is autogenerated by DB; use 0L placeholder
            val expense = Expense(
                id = 0L,
                amount = amount,
                description = description,
                category = category,
                timestamp = timestamp
            )
            repo.addExpense(expense)
            _saved.value = true
        }
    }
}
